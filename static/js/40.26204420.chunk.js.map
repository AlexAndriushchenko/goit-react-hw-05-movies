{"version":3,"file":"static/js/40.26204420.chunk.js","mappings":"+PAEaA,E,OAAaC,GAAAA,GAAH,sZ,SC2CvB,EAxCgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,6GAE0BC,EAAAA,EAAAA,oBAA+BN,GAFzD,OAEUG,EAFV,OAGIC,EAAWD,GAHf,gDAKII,QAAQC,IAAR,MALJ,0DAHc,0DACdC,EAUD,GAAE,CAACT,IAECG,GAGF,gCACsB,IAAnBA,EAAQO,SACP,qEAEkB,IAAnBP,EAAQO,SACP,SAACZ,EAAD,UACGK,EAAQQ,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC/B,OACE,2BACE,wBAAKF,KACL,uBAAIC,MAFGC,EAKZ,SAhBW,IAqBtB,C,0UCzCKC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,OAAAA,eAAAA,KAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MACO,qFACC,kFACS,uEACF,iEACW,2DACZ,6DACC,aAmEnB,OAnEmB,yC,mCAInB,6FACQC,EADR,kBACiBC,KADjB,sBACkCA,KADlC,yBAI2BC,EAAAA,EAAAA,IAAUF,EAAK,CACpCG,OAAQ,CACNC,SAAQ,OAACH,KAAF,SANf,cAIUI,EAJV,yBAUWA,EAASC,KAAKC,SAVzB,gCAYIhB,QAAQiB,MAAR,MAZJ,2G,IAAA,6DAgBA,WAAmBC,GAAnB,gFACQT,EADR,kBACiBC,KADjB,sBACkCA,KADlC,yBAI2BC,EAAAA,EAAAA,IAAUF,EAAK,CACpCG,OAAQ,CACNC,SAAQ,OAACH,KAAF,MACPQ,MAAOA,EACPC,KAAM,KARd,cAIUL,EAJV,yBAWWA,EAASC,KAAKC,SAXzB,gCAaIhB,QAAQiB,MAAR,MAbJ,4GAhBA,IAgBA,oEAiBA,WAA0BxB,GAA1B,gFACQgB,EADR,kBACiBC,KADjB,sBAEIA,KAFJ,cAGKjB,GAHL,kBAM2BkB,EAAAA,EAAAA,IAAUF,EAAK,CACpCG,OAAQ,CAAEC,SAAQ,OAACH,KAAF,SAPvB,cAMUI,EANV,yBASWA,EAASC,MATpB,gCAWIf,QAAQiB,MAAR,MAXJ,4GAjBA,IAiBA,oEAeA,WAA0BxB,GAA1B,gFACQgB,EADR,kBACiBC,KADjB,sBAEIA,KAFJ,cAGKjB,GAHL,eAGeiB,KAHf,yBAM2BC,EAAAA,EAAAA,IAAUF,EAAK,CACpCG,OAAQ,CAAEC,SAAQ,OAACH,KAAF,SAPvB,cAMUI,EANV,yBASWA,EAASC,KAAKK,MATzB,gCAWIpB,QAAQiB,MAAR,MAXJ,4GAfA,IAeA,oEAeA,WAA0BxB,GAA1B,gFACQgB,EADR,kBACiBC,KADjB,sBAEIA,KAFJ,cAGKjB,GAHL,eAGeiB,KAHf,yBAM2BC,EAAAA,EAAAA,IAAUF,EAAK,CACpCG,OAAQ,CACNC,SAAQ,OAACH,KAAF,MACPS,KAAM,KATd,cAMUL,EANV,yBAYWA,EAASC,KAAKC,SAZzB,gCAcIhB,QAAQiB,MAAR,MAdJ,4GAfA,MAeA,EA1EIT,GA6FOT,EAAa,IAAIS,C","sources":["pages/MovieDetails/Reviews/Reviews.styled.js","pages/MovieDetails/Reviews/Reviews.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  li {\n    padding: 16px;\n    border-radius: 5px;\n    box-shadow: rgb(0, 0, 0) 0px 1px 4px,\n      rgba(0, 0, 0, 0.8) -23px 0px 20px -23px,\n      rgba(0, 0, 0, 0.8) 23px 0px 20px -23px, rgba(0, 0, 0, 0.1) 0px 0px 40px;\n    max-height: 300px;\n    overflow-y: scroll;\n\n    &:not(:last-of-type) {\n      margin-bottom: 8px;\n    }\n  }\n\n  h3 {\n    margin-bottom: 8px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { apiService } from 'services/Api';\nimport { ReviewList } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    getReviews();\n\n    async function getReviews() {\n      try {\n        const reviews = await apiService.getMovieReviewsById(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [movieId]);\n\n  if (!reviews) return null;\n  \n   return (\n     <>\n       {reviews.length === 0 && (\n         <p>We do not have any reviews for this movie</p>\n       )}\n       {reviews.length !== 0 && (\n         <ReviewList>\n           {reviews.map(({ author, content, id }) => {\n             return (\n               <li key={id}>\n                 <h3>{author}</h3>\n                 <p>{content}</p>\n               </li>\n             );\n           })}\n         </ReviewList>\n       )}\n     </>\n   );\n};\n\nexport default Reviews;\n\n","import axios from 'axios';\n\nclass Api {\n  #API_KEY = '9c2993dc2441e19b5ee9fa98ee7764c5';\n  #BASE_URL = 'https://api.themoviedb.org/3/';\n  #TRENDING_PATH_URL = 'trending/movie/day';\n  #SEARCH_PATH_URL = 'search/movie';\n  #GET_MOVIE_DETAILS_PATH_URL = 'movie/';\n  #GET_CREDIT_URL = '/credits';\n  #GET_REVIEWS_URL = '/reviews';\n  // #IMAGE_BASE_API_URL = `https://image.tmdb.org/t/p/w500`;\n  // #FALLBACK_IMAGE_URL = `https://i.postimg.cc/htSNfpBY/movie-card-plug.jpg`;\n\n  async getTrendingMovies() {\n    const url = `${this.#BASE_URL}${this.#TRENDING_PATH_URL}`;\n\n    try {\n      const response = await axios.get(url, {\n        params: {\n          api_key: this.#API_KEY,\n        },\n      });\n\n      return response.data.results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async searchByWord(query) {\n    const url = `${this.#BASE_URL}${this.#SEARCH_PATH_URL}`;\n\n    try {\n      const response = await axios.get(url, {\n        params: {\n          api_key: this.#API_KEY,\n          query: query,\n          page: 1,\n        },\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMovieDetailsById(movieId) {\n    const url = `${this.#BASE_URL}${\n      this.#GET_MOVIE_DETAILS_PATH_URL\n    }${movieId}`;\n\n    try {\n      const response = await axios.get(url, {\n        params: { api_key: this.#API_KEY },\n      });\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMovieCreditsById(movieId) {\n    const url = `${this.#BASE_URL}${\n      this.#GET_MOVIE_DETAILS_PATH_URL\n    }${movieId}${this.#GET_CREDIT_URL}`;\n\n    try {\n      const response = await axios.get(url, {\n        params: { api_key: this.#API_KEY },\n      });\n      return response.data.cast;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMovieReviewsById(movieId) {\n    const url = `${this.#BASE_URL}${\n      this.#GET_MOVIE_DETAILS_PATH_URL\n    }${movieId}${this.#GET_REVIEWS_URL}`;\n\n    try {\n      const response = await axios.get(url, {\n        params: {\n          api_key: this.#API_KEY,\n          page: 1,\n        },\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nexport const apiService = new Api();\n"],"names":["ReviewList","styled","movieId","useParams","useState","reviews","setReviews","useEffect","apiService","console","log","getReviews","length","map","author","content","id","Api","url","this","axios","params","api_key","response","data","results","error","query","page","cast"],"sourceRoot":""}